#include <stdio.h>
#include <limits.h>

#define V 6

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    int visited[V];
    int i, j, min_dist, next_node;

    for (i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }

    dist[src] = 0;

    for (i = 0; i < V - 1; i++) {
        min_dist = INT_MAX;
        for (j = 0; j < V; j++) {
            if (!visited[j] && dist[j] < min_dist) {
                min_dist = dist[j];
                next_node = j;
            }
        }

        visited[next_node] = 1;

        for (j = 0; j < V; j++) {
            if (!visited[j] && graph[next_node][j] && dist[next_node] + graph[next_node][j] < dist[j]) {
                dist[j] = dist[next_node] + graph[next_node][j];
            }
        }
    }

    printf("Vertex\tDistance from Source\n");
    for (i = 0; i < V; i++) {
        printf("%d \t%d\n", i, dist[i]);
    }
}

int main() {
    int graph[V][V] = {
        {0, 4, 0, 0, 0, 0},
        {4, 0, 8, 0, 0, 0},
        {0, 8, 0, 7, 0, 4},
        {0, 0, 7, 0, 9, 14},
        {0, 0, 0, 9, 0, 10},
        {0, 0, 4, 14, 10, 0}
    };

    int src = 0;

    printf("Dijkstra's algorithm\n");
    dijkstra(graph, src);

    return 0;
}
